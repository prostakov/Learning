openapi: 3.0.1
info:
  title: AnimalHouse.CodeFirst.Server
  description: A simple example ASP.NET Core Web API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Serhii Prostakov
    url: https://twitter.com/prostakov
    email: serhii.prostakov@propellminds.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1
paths:
  /animals:
    get:
      tags:
        - Animals
      summary: Get all animals
      description: Gets all animals that are currently in storage
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Bird'
                    - $ref: '#/components/schemas/Fish'
                    - $ref: '#/components/schemas/Mammal'
                    - $ref: '#/components/schemas/Reptile'
        '400':
          description: Invalid tag value
    post:
      tags:
        - Animals
      summary: Create animal
      description: Animals can be created
      requestBody:
        description: Animal to create
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Bird'
                - $ref: '#/components/schemas/Fish'
                - $ref: '#/components/schemas/Mammal'
                - $ref: '#/components/schemas/Reptile'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Bird'
                  - $ref: '#/components/schemas/Fish'
                  - $ref: '#/components/schemas/Mammal'
                  - $ref: '#/components/schemas/Reptile'
        '400':
          description: Request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
  /animals/tags:
    get:
      tags:
        - Animals
      summary: Finds animals by tags
      description: 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Bird'
                    - $ref: '#/components/schemas/Fish'
                    - $ref: '#/components/schemas/Mammal'
                    - $ref: '#/components/schemas/Reptile'
        '400':
          description: Invalid tag value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorApiResponse'
components:
  schemas:
    Animal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Bird:
      type: object
      allOf:
        - $ref: '#/components/schemas/Animal'
      properties:
        birdType:
          $ref: '#/components/schemas/BirdType'
      additionalProperties: false
    BirdType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    ErrorApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
        errors:
          type: object
          additionalProperties:
            type: string
          nullable: true
      additionalProperties: false
    Fish:
      type: object
      allOf:
        - $ref: '#/components/schemas/Animal'
      properties:
        fishType:
          $ref: '#/components/schemas/FishType'
      additionalProperties: false
    FishType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    Mammal:
      type: object
      allOf:
        - $ref: '#/components/schemas/Animal'
      properties:
        mammalType:
          $ref: '#/components/schemas/MammalType'
      additionalProperties: false
    MammalType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    Reptile:
      type: object
      allOf:
        - $ref: '#/components/schemas/Animal'
      properties:
        reptileType:
          $ref: '#/components/schemas/ReptileType'
      additionalProperties: false
    ReptileType:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
  securitySchemes:
    Bearer:
      type: http
      description: JWT Authorization header using the Bearer scheme.
      scheme: bearer
security:
  - Bearer: [ ]